class MySolution{
     boolean board[][] ;
     List<List<String>> finalList = new ArrayList<List<String>>();
     boolean isQueenPlaceOnSafeArea( int row, int col){
        // Check - 1 Checking on Above Row
        for(int i = row; i>=0; i--){
            if(board[i][col]){ // There is a Queen
                return false;
            }
        }
        // check -2 Left Diagonal Check
        for(int i = row, j = col; i>=0&& j>=0 ; i--, j--){
            if(board[i][j]){
                return false;
            }
        }
        // Check -3 Right Diagonal Check
        for(int i = row, j=col; i>=0 && j<board[row].length; i--, j++){
            if(board[i][j]){
                return false;
            }
        }
        return true;
    }
     int countNumberOfWays( int currentRow){
        int count = 0;
        // Termination Case
        if(currentRow == board.length){
            List<String> l = fillSolutionResult();
            finalList.add(l);
            return 1; // 1 Possiblity
        }
        // From the Row ( Need to Traverse Each Column)
       for(int column = 0 ; column<board[currentRow].length; column++){
            // Place the Queen on Column But Before Placing Check the Queen is Safe or not
            if(isQueenPlaceOnSafeArea( currentRow, column)){
                board[currentRow][column] = true; // Placing the Queen on Board
                // After Placing a Queen , Move to the Next Row
                int result = countNumberOfWays( currentRow+1);
                count = count + result;
                // Stack Fall (BackTracking)
                board[currentRow][column] = false; // Undo the Option
            }
       }
       return count;
    }

     List<String> fillSolutionResult(){
         List<String> list = new ArrayList<>();
        String dots = "";
        for(int i = 0 ; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                if(board[i][j]){
                    dots+="Q";
                }
                else{
                    dots+=".";
                }
            }
            list.add(dots);
            dots = "";
        }
        return list;
    }

}

class Solution {
   // static final int N = 4;
    
    public List<List<String>> solveNQueens(int n) {
        MySolution solution = new MySolution();
        solution.board = new boolean [n][n];
         
        if(n==1){
            List<String> list = new ArrayList<String>();
            list.add("Q");
            solution.finalList.add(list);
            return solution.finalList;
        }
       
        solution.countNumberOfWays(0);
        return solution.finalList;
       

    }
}
